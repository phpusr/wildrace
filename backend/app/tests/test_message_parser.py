from typing import List

from app.services.message_parser import parse
from django.test import TestCase


class MessageParserTests(TestCase):

    def assert_none_result(self, message):
        self.assertIsNone(parse(message))

    def assert_result(self, message: str, start_sum_number, distance_list: List[int], distance: int,
                      end_sum_number: int):
        result = parse(message)

        self.assertEquals(start_sum_number, result.start_sum_number)
        self.assertEquals(distance_list, result.distance_list)
        self.assertEquals(distance, result.distance)
        self.assertEquals(end_sum_number, result.end_sum_number)

    def test_float_distances(self):
        """Test that distances don't be float"""
        self.assert_none_result('321 + 12.8 = 500')
        self.assert_result('321.2 + 12 = 500.12', 2, [12], 12, 500)

    def test_spaces(self):
        """Test that may be spaces between distances"""
        self.assert_result('2345+34=15', 2345, [34], 34, 15)
        self.assert_result('2345 +34=15', 2345, [34], 34, 15)
        self.assert_result('2345 + 34=15', 2345, [34], 34, 15)
        self.assert_result('2345 + 34 =15', 2345, [34], 34, 15)
        self.assert_result('2345 + 34 = 15', 2345, [34], 34, 15)
        self.assert_result('2345 + 34+200 = 15', 2345, [34, 200], 234, 15)
        self.assert_none_result('2345 + 34+200k = 15')

    def test_hash_tag(self):
        """Test that may be hash tag in message"""
        self.assert_result('5145+8=5153\n#–¥–∏–∫–∏–π–∑–∞–±–µ–≥', 5145, [8], 8, 5153)

    def test_many_distances_without_spaces(self):
        """Test many distances in message without spaces"""
        self.assert_result('5127+6+12=5145', 5127, [6, 12], 18, 5145)

    def test_many_distances_with_spaces(self):
        """Test many distances with spaces in message"""
        self.assert_result('5106 + 6 + 15 = 5127', 5106, [6, 15], 21, 5127)

    def test_line_break(self):
        """Test line break in message"""
        self.assert_result('5091+4=5095 –∫–º\n\n#–¥–∏–∫–∏–π–∑–∞–±–µ–≥', 5091, [4], 4, 5095)

    def test_long_message(self):
        """Test long message"""
        self.assert_result('5080+6=5086\n'
                           '–î—Ä—É–∑—å—è, –∫—Ç–æ —Å –£—Ñ—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –æ–≥–æ–Ω—ë–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! üòâüòä\n'
                           '–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–±–µ–∂–∞–ª–∏—Å—å! üëç\n'
                           '–ü—Ä–∞–≤–¥–∞ —Ç—Ä–µ–∫–µ—Ä –æ–ø—è—Ç—å –∑–∞–≥–ª—é—á–∏–ª–æ, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –≤ –º–æ—é –ø–æ–ª—å–∑—É üòÇüòÅ 3 –∫–º/—á\n'
                           '#–∫–ª—É–±–±–µ–≥–∞–°–ø–∞—Ä—Ç–∞ #–∫–ª—É–±–±–µ–≥–∞–°–ø–∞—Ä—Ç–∞–£—Ñ–∞ #–£—Ñ–∞', 5080, [6], 6, 5086)

    def test_stat_message(self):
        """Test that stat message is not taken"""
        self.assert_none_result('–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n'
                                '–£—Ä–∞! –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ö–æ–ª–æ–¥–∞ –∏ —Å–Ω–µ–≥ 5000 –∫–º –ø–æ–∑–∞–¥–∏! –ú—ã - –º–æ–ª–æ–¥—Ü—ã!!\n'
                                '–ò–∑ –Ω–æ–≤–∏—á–∫–æ–≤ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—Å–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∞–≤—Ä—ã –ø–æ–ª—É—á–∞–µ—Ç –Ø–Ω–∞ –ò—à–º–∞–µ–≤–∞ - '
                                '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫! \n\\n'
                                '–ù–∞—à–∏ –∏—Ç–æ–≥–∏ –≤ —Ü–∏—Ñ—Ä–∞—Ö: \n'
                                '1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ–≥–∞:\n'
                                '- –≤—Å–µ–≥–æ - 149 –¥–Ω.\n'
                                '- –æ—Ç—Ä–µ–∑–æ–∫ 4000-5000 - 42 –¥–Ω.\n'
                                '2. –ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂:\n'
                                '- —Å—Ä–µ–¥–Ω–∏–π –≤ –¥–µ–Ω—å - 33,5 –∫–º/–¥\n'
                                '- –º–∞–∫—Å–∏–º—É–º –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - 832 –∫–º.\n'
                                '3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: \n'
                                '- –≤—Å–µ–≥–æ - 727 —Ç—Ä.\n'
                                '- —Å—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å - 4,8 —Ç—Ä./–¥\n'
                                '- –º–∞–∫—Å–∏–º—É–º –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - 76 —Ç—Ä.\n'
                                '4. –ë–µ–≥—É–Ω—ã:\n'
                                '- –≤—Å–µ–≥–æ –æ—Ç–º–µ—Ç–∏–ª–æ—Å—å - 59 —á–µ–ª.\n'
                                '- –æ—Ç–º–µ—Ç–∏–ª–æ—Å—å –Ω–∞ 4000-5000 - 21 —á–µ–ª.\n'
                                '- –Ω–æ–≤—ã—Ö –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ 4000-5000 - 1 —á–µ–ª. \n\n'
                                '–ü–æ—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –Ω–∞ 4000 –∫–º - http://vk.cc/4HAk6E \n'
                                '–°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –Ω–∞ 6000 –∫–º.\n'
                                '–í—Å–µ–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –±–µ–≥–∞!')

    def test_start_sum(self):
        """Test start sum"""
        self.assert_result('0 + 32768 = 32768', 0, [32768], 32768, 32768)

    def test_big_distances(self):
        """Test that big distances will be normal processing"""
        self.assert_result('999999900 + 100 = 1000000000', 999_999_900, [100], 100, 1_000_000_000)
